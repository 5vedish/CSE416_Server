// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int             @id @default(autoincrement())
  displayName      String
  email            String          @unique
  password         String
  createdAt        DateTime        @default(now())
  passwordResets   PasswordReset[] @relation("PasswordResets")
  sessions         Session[]       @relation("Sessions")
  createdPlatforms Platform[]      @relation("OwnedPlatforms")
  quizAttempts     QuizAttempt[]   @relation("QuizAttempts")
  currency         Int
  level            Int
  experience       Int
  badges           Badge[]         @relation("AvailableBadges")
  likedPlatforms   Platform[]      @relation("LikedPlatforms")
  ratings          Rating[]        @relation("RatedPlatforms")

}

model Session {
  id        String   @id
  userId    Int
  user      User     @relation("Sessions", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Platform {
  id            Int      @id @default(autoincrement())
  title         String
  quizzes       Quiz[]   @relation("Quizzes")
  owner         User     @relation("OwnedPlatforms", fields: [ownerId], references: [id])
  ownerId       Int
  averageRating Float    @default(0)
  ratings       Rating[]
  likers        User[]   @relation("LikedPlatforms")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Quiz {
  id         Int        @id @default(autoincrement())
  title      String
  questions  Question[] @relation("Questions")
  difficulty Difficulty
  platform   Platform   @relation("Quizzes", fields: [platformId], references: [id], onDelete: Cascade)
  platformId Int
  maxTime    Int
}

model QuizAttempt {
  id                 Int        @id @default(autoincrement())
  user               User       @relation("QuizAttempts", fields: [userId], references: [id])
  userId             Int
  startTime          DateTime   @default(now())
  endTime            DateTime   @default(now())
  questionsCompleted Int        @default(0)
  questionsCorrect   Int        @default(0)
  difficulty         Difficulty
  totalQuestions     Int
}

model Question {
  id            Int      @id @default(autoincrement())
  question      String
  choices       String[]
  correctChoice Int
  quizId        Int
  quiz          Quiz     @relation("Questions", fields: [quizId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation("PasswordResets", fields: [userId], references: [id])
}

model Badge {
  id          Int    @id @default(autoincrement())
  badgeId     Int    @default(autoincrement())
  name        String
  description String
  tier        Int    @default(0)
  imageUrl    String
  cost        Int
  owners      User[] @relation("AvailableBadges")
}

model Rating {
  id         String   @id
  user       User     @relation("RatedPlatforms", fields: [userId], references: [id])
  userId     Int
  rating     Float
  platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId Int
}
